// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: ocis/services/config/v1/config.proto

package v1

import (
	fmt "fmt"
	_ "github.com/jvillafanez/prototest001/gen/ocis/messages/config/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ConfigService service

func NewConfigServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "ConfigService.GetConfig",
			Path:    []string{"/api/v1/config/get-config"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for ConfigService service

type ConfigService interface {
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...client.CallOption) (*GetConfigResponse, error)
}

type configService struct {
	c    client.Client
	name string
}

func NewConfigService(name string, c client.Client) ConfigService {
	return &configService{
		c:    c,
		name: name,
	}
}

func (c *configService) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...client.CallOption) (*GetConfigResponse, error) {
	req := c.c.NewRequest(c.name, "ConfigService.GetConfig", in)
	out := new(GetConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConfigService service

type ConfigServiceHandler interface {
	GetConfig(context.Context, *GetConfigRequest, *GetConfigResponse) error
}

func RegisterConfigServiceHandler(s server.Server, hdlr ConfigServiceHandler, opts ...server.HandlerOption) error {
	type configService interface {
		GetConfig(ctx context.Context, in *GetConfigRequest, out *GetConfigResponse) error
	}
	type ConfigService struct {
		configService
	}
	h := &configServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ConfigService.GetConfig",
		Path:    []string{"/api/v1/config/get-config"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&ConfigService{h}, opts...))
}

type configServiceHandler struct {
	ConfigServiceHandler
}

func (h *configServiceHandler) GetConfig(ctx context.Context, in *GetConfigRequest, out *GetConfigResponse) error {
	return h.ConfigServiceHandler.GetConfig(ctx, in, out)
}
