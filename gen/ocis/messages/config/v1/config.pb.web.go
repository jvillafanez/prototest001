// Code generated by protoc-gen-microweb. DO NOT EDIT.
// source: v1.proto

package v1

import (
	"bytes"
	"encoding/json"

	"github.com/golang/protobuf/jsonpb"
)

// ConfigJSONMarshaler describes the default jsonpb.Marshaler used by all
// instances of Config. This struct is safe to replace or modify but
// should not be done so concurrently.
var ConfigJSONMarshaler = new(jsonpb.Marshaler)

// MarshalJSON satisfies the encoding/json Marshaler interface. This method
// uses the more correct jsonpb package to correctly marshal the message.
func (m *Config) MarshalJSON() ([]byte, error) {
	if m == nil {
		return json.Marshal(nil)
	}

	buf := &bytes.Buffer{}

	if err := ConfigJSONMarshaler.Marshal(buf, m); err != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

var _ json.Marshaler = (*Config)(nil)

// ConfigJSONUnmarshaler describes the default jsonpb.Unmarshaler used by all
// instances of Config. This struct is safe to replace or modify but
// should not be done so concurrently.
var ConfigJSONUnmarshaler = new(jsonpb.Unmarshaler)

// UnmarshalJSON satisfies the encoding/json Unmarshaler interface. This method
// uses the more correct jsonpb package to correctly unmarshal the message.
func (m *Config) UnmarshalJSON(b []byte) error {
	return ConfigJSONUnmarshaler.Unmarshal(bytes.NewReader(b), m)
}

var _ json.Unmarshaler = (*Config)(nil)

// ConfigOptionJSONMarshaler describes the default jsonpb.Marshaler used by all
// instances of ConfigOption. This struct is safe to replace or modify but
// should not be done so concurrently.
var ConfigOptionJSONMarshaler = new(jsonpb.Marshaler)

// MarshalJSON satisfies the encoding/json Marshaler interface. This method
// uses the more correct jsonpb package to correctly marshal the message.
func (m *ConfigOption) MarshalJSON() ([]byte, error) {
	if m == nil {
		return json.Marshal(nil)
	}

	buf := &bytes.Buffer{}

	if err := ConfigOptionJSONMarshaler.Marshal(buf, m); err != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

var _ json.Marshaler = (*ConfigOption)(nil)

// ConfigOptionJSONUnmarshaler describes the default jsonpb.Unmarshaler used by all
// instances of ConfigOption. This struct is safe to replace or modify but
// should not be done so concurrently.
var ConfigOptionJSONUnmarshaler = new(jsonpb.Unmarshaler)

// UnmarshalJSON satisfies the encoding/json Unmarshaler interface. This method
// uses the more correct jsonpb package to correctly unmarshal the message.
func (m *ConfigOption) UnmarshalJSON(b []byte) error {
	return ConfigOptionJSONUnmarshaler.Unmarshal(bytes.NewReader(b), m)
}

var _ json.Unmarshaler = (*ConfigOption)(nil)

// PlainOptionJSONMarshaler describes the default jsonpb.Marshaler used by all
// instances of PlainOption. This struct is safe to replace or modify but
// should not be done so concurrently.
var PlainOptionJSONMarshaler = new(jsonpb.Marshaler)

// MarshalJSON satisfies the encoding/json Marshaler interface. This method
// uses the more correct jsonpb package to correctly marshal the message.
func (m *PlainOption) MarshalJSON() ([]byte, error) {
	if m == nil {
		return json.Marshal(nil)
	}

	buf := &bytes.Buffer{}

	if err := PlainOptionJSONMarshaler.Marshal(buf, m); err != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

var _ json.Marshaler = (*PlainOption)(nil)

// PlainOptionJSONUnmarshaler describes the default jsonpb.Unmarshaler used by all
// instances of PlainOption. This struct is safe to replace or modify but
// should not be done so concurrently.
var PlainOptionJSONUnmarshaler = new(jsonpb.Unmarshaler)

// UnmarshalJSON satisfies the encoding/json Unmarshaler interface. This method
// uses the more correct jsonpb package to correctly unmarshal the message.
func (m *PlainOption) UnmarshalJSON(b []byte) error {
	return PlainOptionJSONUnmarshaler.Unmarshal(bytes.NewReader(b), m)
}

var _ json.Unmarshaler = (*PlainOption)(nil)

// ComplexOptionJSONMarshaler describes the default jsonpb.Marshaler used by all
// instances of ComplexOption. This struct is safe to replace or modify but
// should not be done so concurrently.
var ComplexOptionJSONMarshaler = new(jsonpb.Marshaler)

// MarshalJSON satisfies the encoding/json Marshaler interface. This method
// uses the more correct jsonpb package to correctly marshal the message.
func (m *ComplexOption) MarshalJSON() ([]byte, error) {
	if m == nil {
		return json.Marshal(nil)
	}

	buf := &bytes.Buffer{}

	if err := ComplexOptionJSONMarshaler.Marshal(buf, m); err != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

var _ json.Marshaler = (*ComplexOption)(nil)

// ComplexOptionJSONUnmarshaler describes the default jsonpb.Unmarshaler used by all
// instances of ComplexOption. This struct is safe to replace or modify but
// should not be done so concurrently.
var ComplexOptionJSONUnmarshaler = new(jsonpb.Unmarshaler)

// UnmarshalJSON satisfies the encoding/json Unmarshaler interface. This method
// uses the more correct jsonpb package to correctly unmarshal the message.
func (m *ComplexOption) UnmarshalJSON(b []byte) error {
	return ComplexOptionJSONUnmarshaler.Unmarshal(bytes.NewReader(b), m)
}

var _ json.Unmarshaler = (*ComplexOption)(nil)
